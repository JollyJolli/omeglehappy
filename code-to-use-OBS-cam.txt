// 1. Open inspector with CTRL+SHIFT+I
// 2. Select the console tab in the top
// 3. Paste the script
// 4. Press enter
// 5. Hover over your own video, and there should be a video switcher that looks horrible but works.

const localVideo = document.getElementById("local-video");

if (localVideo) {
    const cameraSwitcher = document.createElement("select");

    const option = document.createElement("option");
    option.value = "";
    option.text = "Select camera";
    option.disabled = true;
    option.selected = true;
    cameraSwitcher.appendChild(option);

    navigator.mediaDevices
        .enumerateDevices()
        .then((devices) => {
            devices
                .filter((device) => device.kind === "videoinput")
                .forEach((device) => {
                    const option = document.createElement("option");
                    option.value = device.deviceId;
                    option.text =
                        device.label ||
                        `Camera ${cameraSwitcher.options.length + 1}`;
                    cameraSwitcher.appendChild(option);
                });
        })
        .catch((error) => {
            console.error("Error enumerating devices:", error);
        });

    cameraSwitcher.addEventListener("change", function () {
        const selectedDeviceId = this.value;

        if (!selectedDeviceId) {
            return;
        }

        if (localVideo.srcObject) {
            const tracks = localVideo.srcObject.getTracks();
            tracks.forEach((track) => track.stop());
        }

        navigator.mediaDevices
            .getUserMedia({ video: { deviceId: selectedDeviceId } })
            .then((stream) => {
                localVideo.srcObject = stream;
            })
            .catch((error) => {
                console.error("Error accessing camera:", error);
            });
    });

    const microphoneSwitcher = document.createElement("select");

    const microphoneOption = document.createElement("option");
    microphoneOption.value = "";
    microphoneOption.text = "Select microphone";
    microphoneOption.disabled = true;
    microphoneOption.selected = true;
    microphoneSwitcher.appendChild(microphoneOption);

    navigator.mediaDevices
        .enumerateDevices()
        .then((devices) => {
            devices
                .filter((device) => device.kind === "audioinput")
                .forEach((device) => {
                    const option = document.createElement("option");
                    option.value = device.deviceId;
                    option.text =
                        device.label ||
                        `Microphone ${microphoneSwitcher.options.length + 1}`;
                    microphoneSwitcher.appendChild(option);
                });
        })
        .catch((error) => {
            console.error("Error enumerating devices:", error);
        });

    microphoneSwitcher.addEventListener("change", function () {
        const selectedDeviceId = this.value;

        if (!selectedDeviceId) {
            return;
        }

        const currentStream = localVideo.srcObject.clone();

        if (localVideo.srcObject) {
            const tracks = localVideo.srcObject.getTracks();
            tracks.forEach((track) => track.stop());
        }

        if (currentStream) {
            const videoTracks = currentStream.getVideoTracks();

            navigator.mediaDevices
                .getUserMedia({ audio: { deviceId: selectedDeviceId } })
                .then((audioStream) => {
                    const combinedStream = new MediaStream([
                        ...videoTracks,
                        ...audioStream.getAudioTracks(),
                    ]);
                    localVideo.srcObject = combinedStream;
                })
                .catch((error) => {
                    console.error("Error accessing microphone:", error);
                });
        }
    });

    localVideo.muted = false;

    const mediaDevicesFrame = document.querySelector(".media-devices__frame");

    if (mediaDevicesFrame) {
        mediaDevicesFrame.appendChild(cameraSwitcher);
        mediaDevicesFrame.appendChild(microphoneSwitcher);
    }

    const theirElements = document.querySelector(".media-devices__wrapper");
    if (theirElements) {
        theirElements.remove();
    }

    // ðŸŽ¨ CSS pa' que no se vea feito
    const style = document.createElement("style");
    style.textContent = `
        select {
            background-color: #1e1e1e !important;
            color: #ffffff !important;
            border: 2px solid #00ffcc !important;
            border-radius: 6px !important;
            padding: 8px !important;
            font-size: 14px !important;
            margin: 5px 0 !important;
            outline: none !important;
            transition: 0.3s ease !important;
        }

        select:hover {
            border-color: #00ffff !important;
            background-color: #2a2a2a !important;
        }

        select:focus {
            box-shadow: 0 0 5px #00ffcc !important;
        }

        .media-devices__frame {
            background-color: rgba(0, 0, 0, 0.8) !important;
            padding: 15px !important;
            border-radius: 10px !important;
            display: flex !important;
            flex-direction: column !important;
            gap: 10px !important;
            z-index: 9999 !important;
        }

        .media-devices__frame label {
            color: #ffffff !important;
            font-weight: bold !important;
        }
    `;
    document.head.appendChild(style);
} else {
    console.error("Element with ID 'local-video' not found.");
}
