(() => {
    const programVersion = '3';
    const languages = {
        es: {
            title: `üîç OmegleHappy v${programVersion}`,

            buttons: {
                toggle: {
                    expanded: "‚Äì",
                    collapsed: "+"
                },
                history: "üìú",
                censor: {
                    active: "üôà",
                    inactive: "üôâ"
                },
                language: "üåê"
            },
            history: {
                title: "üìú Historial",
                empty: "üì≠ Sin historial todav√≠a.",
                closeButton: "√ó"
            },
            copy: {
                notification: "‚úì {label} copiado"
            },
            error: "‚ùå Error detectado:\n{message}",
            footer: "Hecho con üíª por Formen/Jolly",
            info: {
                city: "Ciudad",
                country: "Pa√≠s",
                ip: "IP",
                continent: "Continente",
                coords: "Coordenadas",
                isp: "ISP",
                time: "Hora Local"
            }
        },
        en: {
            title: `üîç OmegleHappy v${programVersion}`,

            buttons: {
                toggle: {
                    expanded: "‚Äì",
                    collapsed: "+"
                },
                history: "üìú",
                censor: {
                    active: "üôà",
                    inactive: "üôâ"
                },
                language: "üåê"
            },
            history: {
                title: "üìú History",
                empty: "üì≠ No history yet.",
                closeButton: "√ó"
            },
            copy: {
                notification: "‚úì {label} copied"
            },
            error: "‚ùå Error detected:\n{message}",
            footer: "Made with üíª by Formen/Jolly",
            info: {
                city: "City",
                country: "Country",
                ip: "IP",
                continent: "Continent",
                coords: "Coordinates",
                isp: "ISP",
                time: "Local Time"
            }
        },
        pt: {
            title: `üîç OmegleHappy v${programVersion}`,

            buttons: {
                toggle: {
                    expanded: "‚Äì",
                    collapsed: "+"
                },
                history: "üìú",
                censor: {
                    active: "üôà",
                    inactive: "üôâ"
                },
                language: "üåê"
            },
            history: {
                title: "üìú Hist√≥rico",
                empty: "üì≠ Sem hist√≥rico ainda.",
                closeButton: "√ó"
            },
            copy: {
                notification: "‚úì {label} copiado"
            },
            error: "‚ùå Erro detectado:\n{message}",
            footer: "Feito com üíª por Formen/Jolly",
            info: {
                city: "Cidade",
                country: "Pa√≠s",
                ip: "IP",
                continent: "Continente",
                coords: "Coordenadas",
                isp: "ISP",
                time: "Hora Local"
            }
        }
    };

    let currentLanguage = 'es';
    const texts = languages[currentLanguage];

    const overlay = document.createElement('div');
    overlay.id = 'ip-overlay';
    overlay.innerHTML = `
        <div class="overlay-header">
            <span class="overlay-title">${texts.title}</span>
            <div class="overlay-controls">
                <button id="toggle-btn">${texts.buttons.toggle.expanded}</button>
                <button id="history-btn">${texts.buttons.history}</button>
                <button id="censor-btn">${texts.buttons.censor.active}</button>
                <button id="language-btn">${texts.buttons.language}</button>
            </div>
        </div>
        <div class="ip-content"></div>
        <div class="ip-history" style="display:none; padding: 12px; font-size: 12px; color: #ccc;"></div>
        <div class="overlay-footer">${texts.footer}</div>
    `;

    Object.assign(overlay.style, {
        position: 'fixed',
        top: '20px',
        left: '20px',
        width: '340px',
        background: 'linear-gradient(135deg, rgba(20, 20, 40, 0.92), rgba(40, 40, 80, 0.92))',
        backdropFilter: 'blur(15px)',
        color: '#fff',
        fontFamily: 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
        borderRadius: '24px',
        boxShadow: '0 16px 48px rgba(0, 255, 255, 0.25), inset 0 0 0 2px rgba(0, 255, 255, 0.2)',
        overflow: 'hidden',
        zIndex: '999999',
        userSelect: 'none',
        cursor: 'move',
        transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
        transform: 'translateZ(0)',
        backfaceVisibility: 'hidden'
    });

    const styles = `
        .copy-notification {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.3), rgba(0, 255, 157, 0.2));
            color: #00ffff;
            padding: 12px 24px;
            border-radius: 20px;
            font-size: 14px;
            z-index: 1000001;
            animation: fadeInOut 2s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(12px);
            border: 2px solid rgba(0, 255, 255, 0.4);
            box-shadow: 0 8px 32px rgba(0, 255, 255, 0.3), inset 0 0 20px rgba(0, 255, 255, 0.2);
            text-shadow: 0 0 15px rgba(0, 255, 255, 0.7);
            letter-spacing: 0.5px;
            font-weight: 500;
        }
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, 30px) scale(0.9); filter: blur(8px); }
            20% { opacity: 1; transform: translate(-50%, 0) scale(1.05); filter: blur(0); }
            30% { transform: translate(-50%, 0) scale(1); }
            80% { opacity: 1; transform: translate(-50%, 0) scale(1); filter: blur(0); }
            100% { opacity: 0; transform: translate(-50%, -30px) scale(0.9); filter: blur(8px); }
        }
        .history-window {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.98);
            background: linear-gradient(135deg, rgba(20, 20, 40, 0.95), rgba(40, 40, 80, 0.95));
            border-radius: 24px;
            box-shadow: 0 16px 48px rgba(0, 255, 255, 0.2), inset 0 0 0 2px rgba(0, 255, 255, 0.2);
            width: 340px;
            z-index: 1000000;
            overflow: hidden;
            backdrop-filter: blur(15px);
            animation: scaleIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        @keyframes scaleIn {
            from { transform: translate(-50%, -50%) scale(0.9); opacity: 0; }
            to { transform: translate(-50%, -50%) scale(1); opacity: 1; }
        }
        .history-header {
            background: linear-gradient(135deg, rgba(30, 30, 60, 0.95), rgba(50, 50, 100, 0.95));
            padding: 16px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid rgba(0, 255, 255, 0.2);
            color: #00ffff;
            font-size: 16px;
            font-weight: 600;
            text-shadow: 0 0 15px rgba(0, 255, 255, 0.7);
            letter-spacing: 1px;
        }
        .close-history {
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.2), rgba(0, 255, 255, 0.1));
            border: 2px solid rgba(0, 255, 255, 0.3);
            color: #00ffff;
            font-size: 24px;
            cursor: pointer;
            padding: 4px 12px;
            border-radius: 12px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .close-history:hover {
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.3), rgba(0, 255, 255, 0.2));
            transform: scale(1.1);
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
        }
        .history-content {
            padding: 20px;
            max-height: 400px;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: rgba(0, 255, 255, 0.3) transparent;
        }
        .history-content::-webkit-scrollbar {
            width: 6px;
        }
        .history-content::-webkit-scrollbar-thumb {
            background: rgba(0, 255, 255, 0.3);
            border-radius: 3px;
        }
        .history-item {
            padding: 12px 16px;
            margin-bottom: 12px;
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.1), rgba(0, 255, 255, 0.05));
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 2px solid rgba(0, 255, 255, 0.1);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2), inset 0 0 20px rgba(0, 255, 255, 0.05);
        }
        .history-item:hover {
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.15), rgba(0, 255, 255, 0.1));
            transform: translateY(-4px) scale(1.03);
            box-shadow: 0 12px 32px rgba(0, 255, 255, 0.2), inset 0 0 30px rgba(0, 255, 255, 0.1);
            border-color: rgba(0, 255, 255, 0.3);
        }
        .info-item {
            cursor: pointer;
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.08), rgba(0, 255, 255, 0.04));
            backdrop-filter: blur(8px);
            border: 2px solid rgba(0, 255, 255, 0.15);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2), inset 0 0 20px rgba(0, 255, 255, 0.05);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .info-item:hover {
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.12), rgba(0, 255, 255, 0.08));
            transform: translateY(-2px) scale(1.02);
            box-shadow: 0 12px 32px rgba(0, 255, 255, 0.25), inset 0 0 30px rgba(0, 255, 255, 0.1);
            border-color: rgba(0, 255, 255, 0.3);
        }

        .overlay-header {
            background: linear-gradient(135deg, rgba(30, 30, 60, 0.95), rgba(50, 50, 100, 0.95));
            padding: 16px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: grab;
            border-bottom: 2px solid rgba(0, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
        }
        .overlay-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.5), transparent);
            opacity: 0.5;
        }
        .overlay-title {
            font-weight: 600;
            font-size: 16px;
            color: #00ffff;
            letter-spacing: 1px;
            text-shadow: 0 0 15px rgba(0, 255, 255, 0.7);
            position: relative;
            z-index: 1;
        }
        .overlay-controls button {
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.15), rgba(0, 255, 255, 0.1));
            border: 2px solid rgba(0, 255, 255, 0.3);
            color: #00ffff;
            font-size: 15px;
            cursor: pointer;
            margin-left: 10px;
            padding: 6px 12px;
            border-radius: 12px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            text-shadow: 0 0 15px rgba(0, 255, 255, 0.7);
            position: relative;
            overflow: hidden;
        }
        .overlay-controls button::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.3), transparent);
            border-radius: 12px;
            z-index: -1;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        .overlay-controls button:hover {
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.25), rgba(0, 255, 255, 0.15));
            transform: translateY(-2px) scale(1.05);
            box-shadow: 0 8px 24px rgba(0, 255, 255, 0.3);
        }
        .overlay-controls button:hover::before {
            opacity: 1;
        }
        .ip-content {
            padding: 20px;
            font-size: 14px;
            line-height: 1.7;
            opacity: 1;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            background: linear-gradient(135deg, rgba(0, 255, 255, 0.03), rgba(0, 255, 255, 0.01));
        }
        .ip-content::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at center, rgba(0, 255, 255, 0.1) 0%, transparent 70%);
            opacity: 0;
            transition: opacity 0.4s ease;
            pointer-events: none;
        }
        .ip-content:hover::before {
            opacity: 1;
        }
        .ip-content.hidden {
            opacity: 0;
            transform: translateY(10px);
        }
        .ip-content b {
            color: #00ffff;
            font-weight: 600;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }
        .overlay-footer {
            padding: 12px 20px;
            font-size: 12px;
            color: rgba(0, 255, 255, 0.6);
            background: linear-gradient(135deg, rgba(30, 30, 60, 0.95), rgba(50, 50, 100, 0.95));
            text-align: center;
            border-top: 2px solid rgba(0, 255, 255, 0.2);
            text-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
            position: relative;
            overflow: hidden;
        }
        .overlay-footer::before {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.5), transparent);
            opacity: 0.5;
        }
    `;
    const styleTag = document.createElement('style');
    styleTag.innerText = styles;
    document.head.appendChild(styleTag);

    document.body.appendChild(overlay);

    const toggleBtn = overlay.querySelector('#toggle-btn');
    const censorBtn = overlay.querySelector('#censor-btn');
    const historyBtn = overlay.querySelector('#history-btn');
    const contentDiv = overlay.querySelector('.ip-content');
    const historyDiv = overlay.querySelector('.ip-history');

    let isCensored = false;
    let originalIP = '';
    let lastIP = null;

    toggleBtn.onclick = () => {
        const isHidden = contentDiv.classList.contains('hidden');
        contentDiv.classList.toggle('hidden');
        historyDiv.style.display = 'none';
        toggleBtn.innerText = isHidden ? texts.buttons.toggle.expanded : texts.buttons.toggle.collapsed;
        if (isHidden) {
            overlay.style.width = '340px';
            overlay.style.height = 'auto';
            contentDiv.style.display = 'block';
            overlay.querySelector('.overlay-title').textContent = texts.title;
            overlay.querySelector('.overlay-title').style.fontSize = '16px';
        } else {
            const cityInfo = document.querySelector('.info-item:nth-child(1) .info-value').textContent;
            overlay.style.width = '340px';
            overlay.style.height = '60px';
            contentDiv.style.display = 'none';
            overlay.querySelector('.overlay-title').textContent = cityInfo;
            overlay.querySelector('.overlay-title').style.fontSize = '16px';
        }
    };

    historyBtn.onclick = () => {
        const historyWindow = document.createElement('div');
        historyWindow.className = 'history-window';
        historyWindow.innerHTML = `
            <div class="history-header">
                <span>${texts.history.title}</span>
                <button class="close-history">${texts.history.closeButton}</button>
            </div>
            <div class="history-content"></div>
        `;
        document.body.appendChild(historyWindow);
        
        const closeBtn = historyWindow.querySelector('.close-history');
        closeBtn.onclick = () => historyWindow.remove();
        
        renderHistory(historyWindow.querySelector('.history-content'));
    };

    const languageBtn = overlay.querySelector('#language-btn');
    
    const changeLanguage = () => {
        const languages = ['es', 'en', 'pt'];
        const currentIndex = languages.indexOf(currentLanguage);
        currentLanguage = languages[(currentIndex + 1) % languages.length];
        Object.assign(texts, languages[currentLanguage]);
        updateOverlay(lastIP ? lastIP : {});
    };

    languageBtn.onclick = changeLanguage;

    censorBtn.onclick = () => {
        isCensored = !isCensored;
        if (isCensored) {
            contentDiv.innerHTML = contentDiv.innerHTML
                .replace(originalIP, '***.***.***.***')
                .replace(/\d+\.\d+,\s*\d+\.\d+/g, '***.***, ***.**');
            censorBtn.innerText = texts.buttons.censor.active;
        } else {
            fetchIPInfo(lastIP);
            censorBtn.innerText = texts.buttons.censor.inactive;
        }
    };

    const saveToHistory = (entry) => {
        let history = JSON.parse(localStorage.getItem('ipHistory') || '[]');
        history.unshift(entry);
        if (history.length > 5) history = history.slice(0, 5); // Solo 5 entradas
        localStorage.setItem('ipHistory', JSON.stringify(history));
    };

    const renderHistory = (container) => {
        let history = JSON.parse(localStorage.getItem('ipHistory') || '[]');
        if (!history.length) {
            container.innerHTML = texts.history.empty;
            return;
        }
        container.innerHTML = history.map((h, i) => {
            return `<div class="history-item">${h.flag || ''} ${h.country} - ${h.city} - ${h.ip}</div>`;
        }).join('');
    };

    const copyToClipboard = async (text) => {
        try {
            await navigator.clipboard.writeText(text);
        } catch (err) {
            console.error('Error al copiar:', err);
        }
    };

    const updateOverlay = (data) => {
        originalIP = data.ip;
        const currentTime = new Date().toLocaleString('es-MX', {
            timeZone: data.time_zone.name,
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    
        const handleInfoClick = (value, label) => {
            if (!isCensored) {
                copyToClipboard(value);
                const notification = document.createElement('div');
                notification.className = 'copy-notification';
                notification.textContent = texts.copy.notification.replace('{label}', label);
                document.body.appendChild(notification);
                setTimeout(() => notification.remove(), 2000);
            }
        };
    
        const infoGroups = [
            {
                icon: 'üèôÔ∏è',
                label: texts.info.city,
                value: `${data.city}, ${data.state_prov}`
            },
            {
                icon: 'üåç',
                label: texts.info.country,
                value: `${data.country_name} ${data.country_flag_emoji || ''}`
            },
            {
                icon: 'üî•',
                label: texts.info.ip,
                value: isCensored ? '***.***.***.***' : data.ip,
                class: 'primary'
            },
            {
                icon: 'üåê',
                label: texts.info.continent,
                value: data.continent_name
            },
            {
                icon: 'ÔøΩ',
                label: texts.info.coords,
                value: `${data.latitude}, ${data.longitude}`,
                class: 'coords'
            },
            {
                icon: 'ÔøΩÔ∏è',
                label: texts.info.isp,
                value: data.isp
            },
            {
                icon: '‚è∞',
                label: texts.info.time,
                value: currentTime,
                class: 'time'
            }
        ];
    
        contentDiv.innerHTML = `
            <div class="info-container">
                ${infoGroups.map(group => `
                    <div class="info-item ${group.class || ''}" onclick="(${handleInfoClick.toString()})('${group.value.replace(/'/g, "\'")}', '${group.label}')">
                        <div class="info-icon">${group.icon}</div>
                        <div class="info-content">
                            <div class="info-label">${group.label}</div>
                            <div class="info-value">${group.value}</div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    
        // A√±adir estilos din√°micos para la nueva estructura
        if (!document.querySelector('#dynamic-styles')) {
            const dynamicStyles = document.createElement('style');
            dynamicStyles.id = 'dynamic-styles';
            dynamicStyles.innerHTML = `
                .info-container {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
                    gap: 12px;
                    animation: fadeIn 0.3s ease;
                }
                .info-item {
                    display: flex;
                    align-items: flex-start;
                    padding: 8px;
                    border-radius: 8px;
                    background: rgba(255,255,255,0.03);
                    transition: transform 0.2s ease, background 0.2s ease;
                }
                .info-item:hover {
                    transform: translateY(-2px);
                    background: rgba(255,255,255,0.05);
                }
                .info-icon {
                    font-size: 16px;
                    margin-right: 8px;
                    opacity: 0.9;
                }
                .info-content {
                    flex: 1;
                }
                .info-label {
                    font-size: 11px;
                    color: #00ff9d;
                    margin-bottom: 2px;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }
                .info-value {
                    font-size: 13px;
                    word-break: break-word;
                }
                .info-item.primary {
                    grid-column: 1 / -1;
                    background: rgba(0, 255, 157, 0.05);
                }
                .info-item.primary .info-value {
                    font-size: 15px;
                    font-weight: 500;
                }
                .info-item.coords .info-value {
                    font-family: monospace;
                    font-size: 12px;
                }
                .info-item.time .info-value {
                    font-family: monospace;
                    color: #00ff9d;
                }
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
            `;
            document.head.appendChild(dynamicStyles);
        }
    
        saveToHistory({
            ip: data.ip,
            country: data.country_name,
            city: data.city,
            flag: data.country_flag_emoji || ''
        });
    };

    const showError = (msg) => {
        contentDiv.innerText = texts.error.replace('{message}', msg);
        overlay.style.color = '#ff4d4d';
    };

    const API_KEYS = [
        '1e761879cafa42e6aa93f3b682612acf',
        '7adc7b2623c64ebda389cbb388a0aaea'
    ];
    let currentKeyIndex = 0;
    let failedKeys = new Set();

    const fetchIPInfo = async (ip) => {
        const initialKeyIndex = currentKeyIndex;
        let attempts = 0;

        while (attempts < API_KEYS.length) {
            if (failedKeys.size === API_KEYS.length) {
                failedKeys.clear(); // Resetear las claves fallidas si todas han fallado
            }

            const apiKey = API_KEYS[currentKeyIndex];
            
            if (!failedKeys.has(apiKey)) {
                try {
                    const res = await fetch(`https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=${ip}`);
                    if (!res.ok) {
                        if (res.status === 429 || res.status === 403) { // L√≠mite excedido o clave inv√°lida
                            failedKeys.add(apiKey);
                            throw new Error(`API Key ${currentKeyIndex + 1} alcanz√≥ su l√≠mite`);
                        }
                        throw new Error(`HTTP ${res.status}`);
                    }
                    const json = await res.json();
                    updateOverlay(json);
                    return;
                } catch (e) {
                    console.warn(`Error con API Key ${currentKeyIndex + 1}:`, e.message);
                    failedKeys.add(apiKey);
                }
            }

            currentKeyIndex = (currentKeyIndex + 1) % API_KEYS.length;
            attempts++;
        }

        showError("No fue posible obtener info: Todas las API Keys han fallado");
        currentKeyIndex = initialKeyIndex; // Restaurar el √≠ndice inicial
    };

    const handleCandidate = (candidate) => {
        try {
            const parts = candidate.candidate.split(' ');
            const ip = parts[4];
            const type = parts[7];
            if (type === 'srflx' && ip !== lastIP) {
                lastIP = ip;
                fetchIPInfo(ip);
            }
        } catch (e) {
            showError("Error ICE:\n" + e.message);
        }
    };

    const originalPeerConnection = window.RTCPeerConnection;
    if (!originalPeerConnection) {
        showError("Tu navegador no soporta WebRTC ü§ñ");
        return;
    }

    window.RTCPeerConnection = function (...args) {
        const pc = new originalPeerConnection(...args);
        const originalAddIceCandidate = pc.addIceCandidate;
        pc.addIceCandidate = function (iceCandidate, ...rest) {
            if (iceCandidate && iceCandidate.candidate) {
                handleCandidate(iceCandidate);
            }
            return originalAddIceCandidate.call(this, iceCandidate, ...rest);
        };
        return pc;
    };

    // Drag funcionality
    let isDragging = false;
    let offsetX, offsetY;

    const header = overlay.querySelector('.overlay-header');
    header.addEventListener('mousedown', (e) => {
        isDragging = true;
        offsetX = e.clientX - overlay.getBoundingClientRect().left;
        offsetY = e.clientY - overlay.getBoundingClientRect().top;
        document.body.style.userSelect = 'none';
    });

    document.addEventListener('mousemove', (e) => {
        if (isDragging) {
            overlay.style.left = `${e.clientX - offsetX}px`;
            overlay.style.top = `${e.clientY - offsetY}px`;
        }
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
        document.body.style.userSelect = '';
    });

    console.log(`‚úÖ OmegleHappy v${programVersion} || Todo funcionando perfecto`);
})();
