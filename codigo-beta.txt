(() => {
    const programVersion = '2.3';
    const THEME_KEY = 'omegle_happy_theme';
    const POSITION_KEY = 'omegle_happy_position';
    
    // Sistema de temas y configuraci√≥n
    const themes = {
        dark: {
            background: '#1a1a1a',
            text: '#fff',
            accent: '#00ff9d',
            secondary: '#666',
            border: '#333',
            cardBg: 'rgba(255,255,255,0.03)'
        },
        light: {
            background: '#ffffff',
            text: '#333333',
            accent: '#00b36b',
            secondary: '#999',
            border: '#e0e0e0',
            cardBg: 'rgba(0,0,0,0.03)'
        }
    };
    
    let currentTheme = localStorage.getItem(THEME_KEY) || 'dark';
    let savedPosition = JSON.parse(localStorage.getItem(POSITION_KEY) || '{ "top": "20px", "left": "20px" }');
    const overlay = document.createElement('div');
    overlay.id = 'ip-overlay';
    overlay.innerHTML = `
        <div class="overlay-header">
            <span class="overlay-title">üîç OmegleHappy v${programVersion}</span>
            <div class="overlay-controls">
                <button id="toggle-btn" title="Minimizar/Maximizar">‚Äì</button>
                <button id="history-btn" title="Ver historial">üìú</button>
                <button id="censor-btn" title="Ocultar informaci√≥n sensible">üôà</button>
                <button id="theme-btn" title="Cambiar tema">üé®</button>
            </div>
        </div>
        <div class="ip-content"></div>
        <div class="ip-history" style="display:none; padding: 12px; font-size: 12px; color: #ccc;"></div>
        <div class="overlay-footer">Hecho con üíª por Jolly</div>
    `;

    const applyTheme = (themeName) => {
        const theme = themes[themeName];
        document.documentElement.style.setProperty('--theme-bg', theme.background);
        document.documentElement.style.setProperty('--theme-text', theme.text);
        document.documentElement.style.setProperty('--theme-accent', theme.accent);
        document.documentElement.style.setProperty('--theme-secondary', theme.secondary);
        document.documentElement.style.setProperty('--theme-border', theme.border);
        document.documentElement.style.setProperty('--theme-card-bg', theme.cardBg);
    };

    applyTheme(currentTheme);

    Object.assign(overlay.style, {
        position: 'fixed',
        top: savedPosition.top,
        left: savedPosition.left,
        width: '320px',
        background: 'var(--theme-bg)',
        color: 'var(--theme-text)',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        borderRadius: '16px',
        boxShadow: '0 8px 32px rgba(0,0,0,0.4)',
        overflow: 'hidden',
        zIndex: '999999',
        userSelect: 'none',
        cursor: 'move',
        transition: 'all 0.3s ease'
    });

    const styles = `
        :root {
            --theme-bg: #1a1a1a;
            --theme-text: #fff;
            --theme-accent: #00ff9d;
            --theme-secondary: #666;
            --theme-border: #333;
            --theme-card-bg: rgba(255,255,255,0.03);
        }

        .tooltip {
            position: absolute;
            background: var(--theme-bg);
            color: var(--theme-text);
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s ease;
            z-index: 1000002;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            border: 1px solid var(--theme-border);
        }

        .copy-notification {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(var(--theme-accent-rgb), 0.2);
            color: var(--theme-accent);
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 1000001;
            animation: fadeInOut 2s ease;
        }
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, 20px); }
            20% { opacity: 1; transform: translate(-50%, 0); }
            80% { opacity: 1; transform: translate(-50%, 0); }
            100% { opacity: 0; transform: translate(-50%, -20px); }
        }
        .history-window {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--theme-bg);
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.4);
            width: 300px;
            z-index: 1000000;
            overflow: hidden;
        }
        .history-header {
            background: var(--theme-card-bg);
            padding: 12px 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #333;
            color: var(--theme-accent);
            font-size: 14px;
            font-weight: 600;
        }
        .close-history {
            background: none;
            border: none;
            color: var(--theme-accent);
            font-size: 20px;
            cursor: pointer;
            padding: 0 4px;
        }
        .history-content {
            padding: 16px;
            max-height: 300px;
            overflow-y: auto;
        }
        .history-item {
            padding: 8px 12px;
            margin-bottom: 8px;
            background: rgba(255,255,255,0.03);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .history-item:hover {
            background: rgba(255,255,255,0.05);
            transform: translateY(-2px);
        }
        .info-item {
            cursor: pointer;
        }

        .overlay-header {
            background: var(--theme-card-bg);
            padding: 12px 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: grab;
            border-bottom: 1px solid #333;
        }
        .overlay-title {
            font-weight: 600;
            font-size: 14px;
            color: var(--theme-accent);
            letter-spacing: 0.5px;
        }
        .overlay-controls button {
            background: none;
            border: none;
            color: var(--theme-accent);
            font-size: 14px;
            cursor: pointer;
            margin-left: 8px;
            padding: 4px;
            border-radius: 4px;
            transition: background 0.2s ease;
        }
        .overlay-controls button:hover {
            background: rgba(0, 255, 157, 0.1);
        }
        .ip-content {
            padding: 16px;
            font-size: 13px;
            line-height: 1.6;
            opacity: 1;
            transition: opacity 0.3s ease;
        }
        .ip-content.hidden {
            opacity: 0;
        }
        .ip-content b {
            color: var(--theme-accent);
            font-weight: 500;
        }
        .overlay-footer {
            padding: 8px 16px;
            font-size: 11px;
            color: #666;
            background: var(--theme-card-bg);
            text-align: center;
            border-top: 1px solid #333;
        }
    `;
    const styleTag = document.createElement('style');
    styleTag.innerText = styles;
    document.head.appendChild(styleTag);

    document.body.appendChild(overlay);

    const toggleBtn = overlay.querySelector('#toggle-btn');
    const censorBtn = overlay.querySelector('#censor-btn');
    const historyBtn = overlay.querySelector('#history-btn');
    const contentDiv = overlay.querySelector('.ip-content');
    const historyDiv = overlay.querySelector('.ip-history');

    let isCensored = false;
    let originalIP = '';
    let lastIP = null;

    toggleBtn.onclick = () => {
        const isHidden = contentDiv.classList.contains('hidden');
        contentDiv.classList.toggle('hidden');
        historyDiv.style.display = 'none';
        toggleBtn.innerText = isHidden ? '‚Äì' : '+';
        if (isHidden) {
            overlay.style.width = '320px';
            overlay.style.height = 'auto';
            contentDiv.style.display = 'block';
        } else {
            overlay.style.width = '40px';
            overlay.style.height = '40px';
            contentDiv.style.display = 'none';
        }
    };

    historyBtn.onclick = () => {
        const historyWindow = document.createElement('div');
        historyWindow.className = 'history-window';
        historyWindow.innerHTML = `
            <div class="history-header">
                <span>üìú Historial</span>
                <button class="close-history">√ó</button>
            </div>
            <div class="history-content"></div>
        `;
        document.body.appendChild(historyWindow);
        
        const closeBtn = historyWindow.querySelector('.close-history');
        closeBtn.onclick = () => historyWindow.remove();
        
        renderHistory(historyWindow.querySelector('.history-content'));
    };

    censorBtn.onclick = () => {
        isCensored = !isCensored;
        if (isCensored) {
            contentDiv.innerHTML = contentDiv.innerHTML
                .replace(originalIP, '***.***.***.***')
                .replace(/\d+\.\d+,\s*\d+\.\d+/g, '***.***, ***.**');
            censorBtn.innerText = 'üôà';
        } else {
            fetchIPInfo(lastIP);
            censorBtn.innerText = 'üôâ';
        }
    };

    const saveToHistory = (entry) => {
        let history = JSON.parse(localStorage.getItem('ipHistory') || '[]');
        history.unshift(entry);
        if (history.length > 5) history = history.slice(0, 5); // Solo 5 entradas
        localStorage.setItem('ipHistory', JSON.stringify(history));
    };

    const renderHistory = (container) => {
        let history = JSON.parse(localStorage.getItem('ipHistory') || '[]');
        if (!history.length) {
            container.innerHTML = 'üì≠ Sin historial todav√≠a.';
            return;
        }
        container.innerHTML = history.map((h, i) => {
            return `<div class="history-item">${h.flag || ''} ${h.country} - ${h.city} - ${h.ip}</div>`;
        }).join('');
    };

    const copyToClipboard = async (text) => {
        try {
            await navigator.clipboard.writeText(text);
        } catch (err) {
            console.error('Error al copiar:', err);
        }
    };

    const updateOverlay = (data) => {
        originalIP = data.ip;
        const currentTime = new Date().toLocaleString('es-MX', {
            timeZone: data.time_zone.name,
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    
        const handleInfoClick = (value, label) => {
            if (!isCensored) {
                copyToClipboard(value);
                const notification = document.createElement('div');
                notification.className = 'copy-notification';
                notification.textContent = `‚úì ${label} copiado`;
                document.body.appendChild(notification);
                setTimeout(() => notification.remove(), 2000);
            }
        };
    
        const infoGroups = [
            {
                icon: 'üèôÔ∏è',
                label: 'Ciudad',
                value: `${data.city}, ${data.state_prov}`
            },
            {
                icon: 'üåç',
                label: 'Pa√≠s',
                value: `${data.country_name} ${data.country_flag_emoji || ''}`
            },
            {
                icon: 'üî•',
                label: 'IP',
                value: isCensored ? '***.***.***.***' : data.ip,
                class: 'primary'
            },
            {
                icon: 'üåê',
                label: 'Continente',
                value: data.continent_name
            },
            {
                icon: 'ÔøΩ',
                label: 'Coordenadas',
                value: `${data.latitude}, ${data.longitude}`,
                class: 'coords'
            },
            {
                icon: 'ÔøΩÔ∏è',
                label: 'ISP',
                value: data.isp
            },
            {
                icon: '‚è∞',
                label: 'Hora Local',
                value: currentTime,
                class: 'time'
            }
        ];
    
        contentDiv.innerHTML = `
            <div class="info-container">
                ${infoGroups.map(group => `
                    <div class="info-item ${group.class || ''}" onclick="(${handleInfoClick.toString()})('${group.value.replace(/'/g, "\'")}', '${group.label}')">
                        <div class="info-icon">${group.icon}</div>
                        <div class="info-content">
                            <div class="info-label">${group.label}</div>
                            <div class="info-value">${group.value}</div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    
        // A√±adir estilos din√°micos para la nueva estructura
        if (!document.querySelector('#dynamic-styles')) {
            const dynamicStyles = document.createElement('style');
            dynamicStyles.id = 'dynamic-styles';
            dynamicStyles.innerHTML = `
                .info-container {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
                    gap: 12px;
                    animation: fadeIn 0.3s ease;
                }
                .info-item {
                    display: flex;
                    align-items: flex-start;
                    padding: 8px;
                    border-radius: 8px;
                    background: rgba(255,255,255,0.03);
                    transition: transform 0.2s ease, background 0.2s ease;
                }
                .info-item:hover {
                    transform: translateY(-2px);
                    background: rgba(255,255,255,0.05);
                }
                .info-icon {
                    font-size: 16px;
                    margin-right: 8px;
                    opacity: 0.9;
                }
                .info-content {
                    flex: 1;
                }
                .info-label {
                    font-size: 11px;
                    color: var(--theme-accent);
                    margin-bottom: 2px;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }
                .info-value {
                    font-size: 13px;
                    word-break: break-word;
                }
                .info-item.primary {
                    grid-column: 1 / -1;
                    background: rgba(0, 255, 157, 0.05);
                }
                .info-item.primary .info-value {
                    font-size: 15px;
                    font-weight: 500;
                }
                .info-item.coords .info-value {
                    font-family: monospace;
                    font-size: 12px;
                }
                .info-item.time .info-value {
                    font-family: monospace;
                    color: var(--theme-accent);
                }
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
            `;
            document.head.appendChild(dynamicStyles);
        }
    
        saveToHistory({
            ip: data.ip,
            country: data.country_name,
            city: data.city,
            flag: data.country_flag_emoji || ''
        });
    };

    const showError = (msg) => {
        contentDiv.innerText = `‚ùå Error detectado:\n${msg}`;
        overlay.style.color = '#ff4d4d';
    };

    const fetchIPInfo = async (ip) => {
        try {
            const res = await fetch(`https://api.ipgeolocation.io/ipgeo?apiKey=7adc7b2623c64ebda389cbb388a0aaea&ip=${ip}`);
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            const json = await res.json();
            updateOverlay(json);
        } catch (e) {
            showError("No fue posible obtener info:\n" + e.message);
        }
    };

    const handleCandidate = (candidate) => {
        try {
            const parts = candidate.candidate.split(' ');
            const ip = parts[4];
            const type = parts[7];
            if (type === 'srflx' && ip !== lastIP) {
                lastIP = ip;
                fetchIPInfo(ip);
            }
        } catch (e) {
            showError("Error ICE:\n" + e.message);
        }
    };

    const originalPeerConnection = window.RTCPeerConnection;
    if (!originalPeerConnection) {
        showError("Tu navegador no soporta WebRTC ü§ñ");
        return;
    }

    window.RTCPeerConnection = function (...args) {
        const pc = new originalPeerConnection(...args);
        const originalAddIceCandidate = pc.addIceCandidate;
        pc.addIceCandidate = function (iceCandidate, ...rest) {
            if (iceCandidate && iceCandidate.candidate) {
                handleCandidate(iceCandidate);
            }
            return originalAddIceCandidate.call(this, iceCandidate, ...rest);
        };
        return pc;
    };

    // Drag funcionality
    let isDragging = false;
    let offsetX, offsetY;

    const header = overlay.querySelector('.overlay-header');
    header.addEventListener('mousedown', (e) => {
        isDragging = true;
        offsetX = e.clientX - overlay.getBoundingClientRect().left;
        offsetY = e.clientY - overlay.getBoundingClientRect().top;
        document.body.style.userSelect = 'none';
    });

    document.addEventListener('mousemove', (e) => {
        if (isDragging) {
            overlay.style.left = `${e.clientX - offsetX}px`;
            overlay.style.top = `${e.clientY - offsetY}px`;
        }
    });

    document.addEventListener('mouseup', () => {
        if (isDragging) {
            isDragging = false;
            document.body.style.userSelect = '';
            // Guardar la posici√≥n
            localStorage.setItem(POSITION_KEY, JSON.stringify({
                top: overlay.style.top,
                left: overlay.style.left
            }));
        }
    });

    // Sistema de tooltips
    const tooltip = document.createElement('div');
    tooltip.className = 'tooltip';
    document.body.appendChild(tooltip);

    document.querySelectorAll('[title]').forEach(el => {
        el.addEventListener('mouseenter', (e) => {
            tooltip.textContent = e.target.getAttribute('title');
            tooltip.style.opacity = '1';
            const rect = e.target.getBoundingClientRect();
            tooltip.style.top = `${rect.bottom + 5}px`;
            tooltip.style.left = `${rect.left + (rect.width - tooltip.offsetWidth) / 2}px`;
        });

        el.addEventListener('mouseleave', () => {
            tooltip.style.opacity = '0';
        });
    });

    // Bot√≥n de tema
    const themeBtn = overlay.querySelector('#theme-btn');
    themeBtn.onclick = () => {
        currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
        localStorage.setItem(THEME_KEY, currentTheme);
        applyTheme(currentTheme);
    };

    console.log("‚úÖ HUD IP activo con historial üìú");
})();
