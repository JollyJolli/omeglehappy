(() => {
    const overlay = document.createElement('div');
    overlay.id = 'ip-overlay';
    overlay.innerHTML = `
        <div class="overlay-header">
            <span class="overlay-title">🔍 IP Info</span>
            <div class="overlay-controls">
                <button id="toggle-btn">–</button>
                <button id="history-btn">📜</button>
                <button id="censor-btn">🙈</button>
            </div>
        </div>
        <div class="ip-content"></div>
        <div class="ip-history" style="display:none; padding: 12px; font-size: 12px; color: #ccc;"></div>
        <div class="overlay-footer">Hecho con 💻 por Jolly</div>
    `;

    Object.assign(overlay.style, {
        position: 'fixed',
        top: '20px',
        left: '20px',
        width: '320px',
        background: '#1a1a1a',
        color: '#fff',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        borderRadius: '16px',
        boxShadow: '0 8px 32px rgba(0,0,0,0.4)',
        overflow: 'hidden',
        zIndex: '999999',
        userSelect: 'none',
        cursor: 'move',
        transition: 'all 0.3s ease'
    });

    const styles = `
        .overlay-header {
            background: #222;
            padding: 12px 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: grab;
            border-bottom: 1px solid #333;
        }
        .overlay-title {
            font-weight: 600;
            font-size: 14px;
            color: #00ff9d;
            letter-spacing: 0.5px;
        }
        .overlay-controls button {
            background: none;
            border: none;
            color: #00ff9d;
            font-size: 14px;
            cursor: pointer;
            margin-left: 8px;
            padding: 4px;
            border-radius: 4px;
            transition: background 0.2s ease;
        }
        .overlay-controls button:hover {
            background: rgba(0, 255, 157, 0.1);
        }
        .ip-content {
            padding: 16px;
            font-size: 13px;
            line-height: 1.6;
            opacity: 1;
            transition: opacity 0.3s ease;
        }
        .ip-content.hidden {
            opacity: 0;
        }
        .ip-content b {
            color: #00ff9d;
            font-weight: 500;
        }
        .overlay-footer {
            padding: 8px 16px;
            font-size: 11px;
            color: #666;
            background: #222;
            text-align: center;
            border-top: 1px solid #333;
        }
    `;
    const styleTag = document.createElement('style');
    styleTag.innerText = styles;
    document.head.appendChild(styleTag);

    document.body.appendChild(overlay);

    const toggleBtn = overlay.querySelector('#toggle-btn');
    const censorBtn = overlay.querySelector('#censor-btn');
    const historyBtn = overlay.querySelector('#history-btn');
    const contentDiv = overlay.querySelector('.ip-content');
    const historyDiv = overlay.querySelector('.ip-history');

    let isCensored = false;
    let originalIP = '';
    let lastIP = null;

    toggleBtn.onclick = () => {
        const isHidden = contentDiv.classList.contains('hidden');
        contentDiv.classList.toggle('hidden');
        toggleBtn.innerText = isHidden ? '–' : '+';
        contentDiv.style.display = 'block';
    };

    historyBtn.onclick = () => {
        const isVisible = historyDiv.style.display === 'block';
        if (!isVisible) renderHistory();
        historyDiv.style.display = isVisible ? 'none' : 'block';
    };

    censorBtn.onclick = () => {
        isCensored = !isCensored;
        if (isCensored) {
            contentDiv.innerHTML = contentDiv.innerHTML.replace(originalIP, '***.***.***.***');
            censorBtn.innerText = '🙈';
        } else {
            fetchIPInfo(lastIP);
            censorBtn.innerText = '🙉';
        }
    };

    const saveToHistory = (entry) => {
        let history = JSON.parse(localStorage.getItem('ipHistory') || '[]');
        history.unshift(entry); // Añade al principio
        if (history.length > 10) history = history.slice(0, 10); // Solo 10
        localStorage.setItem('ipHistory', JSON.stringify(history));
    };

    const renderHistory = () => {
        let history = JSON.parse(localStorage.getItem('ipHistory') || '[]');
        if (!history.length) {
            historyDiv.innerHTML = '📭 Sin historial todavía.';
            return;
        }
        historyDiv.innerHTML = '<b>📜 Historial:</b><br><br>' + history.map((h, i) => {
            return `${i + 1}.- ${h.flag || ''} ${h.country} - ${h.city} - ${h.ip}`;
        }).join('<br>');
    };

    const updateOverlay = (data) => {
        originalIP = data.ip;
        const currentTime = new Date(data.time_zone?.current_time).toLocaleTimeString('es-MX', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });

        const infoGroups = [
            {
                icon: '🔥',
                label: 'IP',
                value: isCensored ? '***.***.***.***' : data.ip,
                class: 'primary'
            },
            {
                icon: '🌍',
                label: 'País',
                value: `${data.country_name} ${data.country_flag_emoji || ''}`
            },
            {
                icon: '🏙️',
                label: 'Ciudad',
                value: `${data.city}, ${data.state_prov}`
            },
            {
                icon: '🌐',
                label: 'Continente',
                value: data.continent_name
            },
            {
                icon: '📍',
                label: 'Coordenadas',
                value: `${data.latitude}, ${data.longitude}`,
                class: 'coords'
            },
            {
                icon: '🛰️',
                label: 'ISP',
                value: data.isp
            },
            {
                icon: '⏰',
                label: 'Hora Local',
                value: currentTime,
                class: 'time'
            }
        ];

        contentDiv.innerHTML = `
            <div class="info-container">
                ${infoGroups.map(group => `
                    <div class="info-item ${group.class || ''}">
                        <div class="info-icon">${group.icon}</div>
                        <div class="info-content">
                            <div class="info-label">${group.label}</div>
                            <div class="info-value">${group.value}</div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;

        // Añadir estilos dinámicos para la nueva estructura
        if (!document.querySelector('#dynamic-styles')) {
            const dynamicStyles = document.createElement('style');
            dynamicStyles.id = 'dynamic-styles';
            dynamicStyles.innerHTML = `
                .info-container {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
                    gap: 12px;
                    animation: fadeIn 0.3s ease;
                }
                .info-item {
                    display: flex;
                    align-items: flex-start;
                    padding: 8px;
                    border-radius: 8px;
                    background: rgba(255,255,255,0.03);
                    transition: transform 0.2s ease, background 0.2s ease;
                }
                .info-item:hover {
                    transform: translateY(-2px);
                    background: rgba(255,255,255,0.05);
                }
                .info-icon {
                    font-size: 16px;
                    margin-right: 8px;
                    opacity: 0.9;
                }
                .info-content {
                    flex: 1;
                }
                .info-label {
                    font-size: 11px;
                    color: #00ff9d;
                    margin-bottom: 2px;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }
                .info-value {
                    font-size: 13px;
                    word-break: break-word;
                }
                .info-item.primary {
                    grid-column: 1 / -1;
                    background: rgba(0, 255, 157, 0.05);
                }
                .info-item.primary .info-value {
                    font-size: 15px;
                    font-weight: 500;
                }
                .info-item.coords .info-value {
                    font-family: monospace;
                    font-size: 12px;
                }
                .info-item.time .info-value {
                    font-family: monospace;
                    color: #00ff9d;
                }
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
            `;
            document.head.appendChild(dynamicStyles);
        }

        saveToHistory({
            ip: data.ip,
            country: data.country_name,
            city: data.city,
            flag: data.country_flag_emoji || ''
        });
    };

    const showError = (msg) => {
        contentDiv.innerText = `❌ Error detectado:\n${msg}`;
        overlay.style.color = '#ff4d4d';
    };

    const fetchIPInfo = async (ip) => {
        try {
            const res = await fetch(`https://api.ipgeolocation.io/ipgeo?apiKey=c9cf4f25c80f4732adb70fcb02c53338&ip=${ip}`);
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            const json = await res.json();
            updateOverlay(json);
        } catch (e) {
            showError("No fue posible obtener info:\n" + e.message);
        }
    };

    const handleCandidate = (candidate) => {
        try {
            const parts = candidate.candidate.split(' ');
            const ip = parts[4];
            const type = parts[7];
            if (type === 'srflx' && ip !== lastIP) {
                lastIP = ip;
                fetchIPInfo(ip);
            }
        } catch (e) {
            showError("Error ICE:\n" + e.message);
        }
    };

    const originalPeerConnection = window.RTCPeerConnection;
    if (!originalPeerConnection) {
        showError("Tu navegador no soporta WebRTC 🤖");
        return;
    }

    window.RTCPeerConnection = function (...args) {
        const pc = new originalPeerConnection(...args);
        const originalAddIceCandidate = pc.addIceCandidate;
        pc.addIceCandidate = function (iceCandidate, ...rest) {
            if (iceCandidate && iceCandidate.candidate) {
                handleCandidate(iceCandidate);
            }
            return originalAddIceCandidate.call(this, iceCandidate, ...rest);
        };
        return pc;
    };

    // Drag funcionality
    let isDragging = false;
    let offsetX, offsetY;

    const header = overlay.querySelector('.overlay-header');
    header.addEventListener('mousedown', (e) => {
        isDragging = true;
        offsetX = e.clientX - overlay.getBoundingClientRect().left;
        offsetY = e.clientY - overlay.getBoundingClientRect().top;
        document.body.style.userSelect = 'none';
    });

    document.addEventListener('mousemove', (e) => {
        if (isDragging) {
            overlay.style.left = `${e.clientX - offsetX}px`;
            overlay.style.top = `${e.clientY - offsetY}px`;
        }
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
        document.body.style.userSelect = '';
    });

    console.log("✅ HUD IP activo con historial 📜");
})();
