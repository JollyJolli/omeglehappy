(() => {
    const overlay = document.createElement('div');
    overlay.id = 'ip-overlay';
    overlay.innerHTML = `
        <div class="overlay-header">
            <span class="overlay-title">🔍 IP Info</span>
            <div class="overlay-controls">
                <button id="toggle-btn">–</button>
                <button id="history-btn">📜</button>
                <button id="censor-btn">🙈</button>
            </div>
        </div>
        <div class="ip-content"></div>
        <div class="ip-history" style="display:none; padding: 12px; font-size: 12px; color: #ccc;"></div>
        <div class="overlay-footer">Hecho con 💻 por Jolly</div>
    `;

    Object.assign(overlay.style, {
        position: 'fixed',
        top: '20px',
        left: '20px',
        width: '340px',
        background: '#111',
        color: '#eee',
        fontFamily: 'Arial, sans-serif',
        borderRadius: '12px',
        boxShadow: '0 10px 25px rgba(0,0,0,0.6)',
        overflow: 'hidden',
        zIndex: '999999',
        userSelect: 'none',
        cursor: 'move'
    });

    const styles = `
        .overlay-header {
            background: #1e1e1e;
            padding: 10px 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: grab;
        }
        .overlay-title {
            font-weight: bold;
            font-size: 14px;
            color: #0f0;
        }
        .overlay-controls button {
            background: none;
            border: none;
            color: #0f0;
            font-size: 14px;
            cursor: pointer;
            margin-left: 6px;
        }
        .ip-content {
            padding: 12px;
            font-size: 13px;
            line-height: 1.4;
        }
        .overlay-footer {
            padding: 6px 12px;
            font-size: 11px;
            color: #777;
            background: #1a1a1a;
            text-align: center;
        }
    `;
    const styleTag = document.createElement('style');
    styleTag.innerText = styles;
    document.head.appendChild(styleTag);

    document.body.appendChild(overlay);

    const toggleBtn = overlay.querySelector('#toggle-btn');
    const censorBtn = overlay.querySelector('#censor-btn');
    const historyBtn = overlay.querySelector('#history-btn');
    const contentDiv = overlay.querySelector('.ip-content');
    const historyDiv = overlay.querySelector('.ip-history');

    let isCensored = false;
    let originalIP = '';
    let lastIP = null;

    toggleBtn.onclick = () => {
        const isHidden = contentDiv.style.display === 'none';
        contentDiv.style.display = isHidden ? 'block' : 'none';
        toggleBtn.innerText = isHidden ? '–' : '+';
    };

    historyBtn.onclick = () => {
        const isVisible = historyDiv.style.display === 'block';
        if (!isVisible) renderHistory();
        historyDiv.style.display = isVisible ? 'none' : 'block';
    };

    censorBtn.onclick = () => {
        isCensored = !isCensored;
        if (isCensored) {
            contentDiv.innerHTML = contentDiv.innerHTML.replace(originalIP, '***.***.***.***');
            censorBtn.innerText = '🙈';
        } else {
            fetchIPInfo(lastIP);
            censorBtn.innerText = '🙉';
        }
    };

    const saveToHistory = (entry) => {
        let history = JSON.parse(localStorage.getItem('ipHistory') || '[]');
        history.unshift(entry); // Añade al principio
        if (history.length > 10) history = history.slice(0, 10); // Solo 10
        localStorage.setItem('ipHistory', JSON.stringify(history));
    };

    const renderHistory = () => {
        let history = JSON.parse(localStorage.getItem('ipHistory') || '[]');
        if (!history.length) {
            historyDiv.innerHTML = '📭 Sin historial todavía.';
            return;
        }
        historyDiv.innerHTML = '<b>📜 Historial:</b><br><br>' + history.map((h, i) => {
            return `${i + 1}.- ${h.flag || ''} ${h.country} - ${h.city} - ${h.ip}`;
        }).join('<br>');
    };

    const updateOverlay = (data) => {
        originalIP = data.ip;
        const currentTime = new Date(data.time_zone?.current_time).toLocaleTimeString('es-MX', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });

        contentDiv.innerHTML = `
            🔥 <b>IP:</b> ${isCensored ? '***.***.***.***' : data.ip}<br>
            🌍 <b>País:</b> ${data.country_name} (${data.country_code}) ${data.country_flag_emoji || ''}<br>
            🧭 <b>Región:</b> ${data.state_prov}<br>
            🏙️ <b>Ciudad:</b> ${data.city}<br>
            🌐 <b>Continente:</b> ${data.continent_name}<br>
            📍 <b>Lat/Lon:</b> ${data.latitude}, ${data.longitude}<br>
            🛰️ <b>ISP:</b> ${data.isp}<br>
            🧬 <b>Org:</b> ${data.organization}<br>
            ⏰ <b>Hora Local:</b> ${currentTime}<br>
            💸 <b>Moneda:</b> ${data.currency?.name || 'N/A'} (${data.currency?.code || ''})
        `;

        saveToHistory({
            ip: data.ip,
            country: data.country_name,
            city: data.city,
            flag: data.country_flag_emoji || ''
        });
    };

    const showError = (msg) => {
        contentDiv.innerText = `❌ Error detectado:\n${msg}`;
        overlay.style.color = '#ff4d4d';
    };

    const fetchIPInfo = async (ip) => {
        try {
            const res = await fetch(`https://api.ipgeolocation.io/ipgeo?apiKey=c9cf4f25c80f4732adb70fcb02c53338&ip=${ip}`);
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            const json = await res.json();
            updateOverlay(json);
        } catch (e) {
            showError("No fue posible obtener info:\n" + e.message);
        }
    };

    const handleCandidate = (candidate) => {
        try {
            const parts = candidate.candidate.split(' ');
            const ip = parts[4];
            const type = parts[7];
            if (type === 'srflx' && ip !== lastIP) {
                lastIP = ip;
                fetchIPInfo(ip);
            }
        } catch (e) {
            showError("Error ICE:\n" + e.message);
        }
    };

    const originalPeerConnection = window.RTCPeerConnection;
    if (!originalPeerConnection) {
        showError("Tu navegador no soporta WebRTC 🤖");
        return;
    }

    window.RTCPeerConnection = function (...args) {
        const pc = new originalPeerConnection(...args);
        const originalAddIceCandidate = pc.addIceCandidate;
        pc.addIceCandidate = function (iceCandidate, ...rest) {
            if (iceCandidate && iceCandidate.candidate) {
                handleCandidate(iceCandidate);
            }
            return originalAddIceCandidate.call(this, iceCandidate, ...rest);
        };
        return pc;
    };

    // Drag funcionality
    let isDragging = false;
    let offsetX, offsetY;

    const header = overlay.querySelector('.overlay-header');
    header.addEventListener('mousedown', (e) => {
        isDragging = true;
        offsetX = e.clientX - overlay.getBoundingClientRect().left;
        offsetY = e.clientY - overlay.getBoundingClientRect().top;
        document.body.style.userSelect = 'none';
    });

    document.addEventListener('mousemove', (e) => {
        if (isDragging) {
            overlay.style.left = `${e.clientX - offsetX}px`;
            overlay.style.top = `${e.clientY - offsetY}px`;
        }
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
        document.body.style.userSelect = '';
    });

    console.log("✅ HUD IP activo con historial 📜");
})();
